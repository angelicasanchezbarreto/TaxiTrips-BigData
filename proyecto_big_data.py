# -*- coding: utf-8 -*-
"""Proyecto Big Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jz2UeJ74P-abQ2lUVXUI2TQmwBC1nZTW
"""

!pip install pyspark
!apt-get install openjdk-8-jdk-headless -qq > /dev/null

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

from google.colab import drive
drive.mount('/content/drive')

"""##Importación de librerías"""

import pyspark.pandas as ps
from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml import Pipeline
from pyspark.ml.feature import VectorAssembler
from pyspark.sql import functions as F
import pandas as pd
import numpy as np
import pyarrow as pa
import pyarrow.parquet as pq
from pyspark.sql import SparkSession
from pyspark.sql import DataFrame
import time
from pyspark.sql.types import StructType
from pyspark.sql.types import *
from pyspark.sql.functions import unix_timestamp, datediff, to_timestamp, expr

spark = SparkSession.builder.appName("BigDataProject").getOrCreate()

"""#Pre-procesamiento de Data"""

taxifile1 = "/content/drive/MyDrive/BigDataP/yellow_tripdata_2021-06.parquet"
taxifile2 = "/content/drive/MyDrive/BigDataP/yellow_tripdata_2019-06.parquet"
taxifile3 = "/content/drive/MyDrive/BigDataP/yellow_tripdata_2018-04.parquet"

df1 = spark.read.parquet(taxifile1)
df2 = spark.read.parquet(taxifile2)
df3 = spark.read.parquet(taxifile3)
df1.head()

"""### Eliminando columnas innecesarias"""

df_clear1 = df1.drop("PULocationID", "DOLocationID", "extra", "store_and_fwd_flag", "RatecodeID", "improvement_surcharge", "congestion_surcharge", "mta_tax", "tip_amount", "tolls_amount", "total_amount", "VendorID", "airport_fee","passenger_count", "payment_type")
df_clear2 = df2.drop("PULocationID", "DOLocationID", "extra", "store_and_fwd_flag", "RatecodeID", "improvement_surcharge", "congestion_surcharge", "mta_tax", "tip_amount", "tolls_amount", "total_amount", "VendorID", "airport_fee","passenger_count", "payment_type")
df_clear3 = df3.drop("PULocationID", "DOLocationID", "extra", "store_and_fwd_flag", "RatecodeID", "improvement_surcharge", "congestion_surcharge", "mta_tax", "tip_amount", "tolls_amount", "total_amount", "VendorID", "airport_fee","passenger_count", "payment_type")

df_clear1 = df_clear1.withColumn("tpep_pickup_datetime", to_timestamp("tpep_pickup_datetime"))
df_clear1 = df_clear1.withColumn("tpep_dropoff_datetime", to_timestamp("tpep_dropoff_datetime"))

df_clear2 = df_clear2.withColumn("tpep_pickup_datetime", to_timestamp("tpep_pickup_datetime"))
df_clear2 = df_clear2.withColumn("tpep_dropoff_datetime", to_timestamp("tpep_dropoff_datetime"))

df_clear3 = df_clear3.withColumn("tpep_pickup_datetime", to_timestamp("tpep_pickup_datetime"))
df_clear3 = df_clear3.withColumn("tpep_dropoff_datetime", to_timestamp("tpep_dropoff_datetime"))

"""### Generando la columna de tiempo total del viaje"""

df_clear1 = df_clear1.withColumn("trip_time",expr("unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime)")/60.0)
df_clear2 = df_clear2.withColumn("trip_time",expr("unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime)")/60.0)
df_clear3 = df_clear3.withColumn("trip_time",expr("unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime)")/60.0)

df_clear1 = df_clear1.drop("tpep_pickup_datetime","tpep_dropoff_datetime")
df_clear2 = df_clear2.drop("tpep_pickup_datetime","tpep_dropoff_datetime")
df_clear3 = df_clear3.drop("tpep_pickup_datetime","tpep_dropoff_datetime")

"""### Limpieza de datos"""

df_clear1 = df_clear1.dropna()
df_clear2 = df_clear2.dropna()
df_clear3 = df_clear3.dropna()

df_clear1.show(10)

df_clear1 = df_clear1[df_clear1["trip_distance"]>0.0]
df_clear1 = df_clear1[df_clear1["trip_time"]>0.0]
df_clear1 = df_clear1[df_clear1["fare_amount"]>0.0]
df_clear1.show(10)

df_clear2 = df_clear2[df_clear2["trip_distance"]>0.0]
df_clear2 = df_clear2[df_clear2["trip_time"]>0.0]
df_clear2 = df_clear2[df_clear2["fare_amount"]>0.0]

df_clear3 = df_clear3[df_clear3["trip_distance"]>0.0]
df_clear3 = df_clear3[df_clear3["trip_time"]>0.0]
df_clear3 = df_clear3[df_clear3["fare_amount"]>0.0]

"""# Modelo

### Entrenamiento
"""

#Se combinan multiples columnas en una sola correspondiente a un vector de caracteristicas
assembler = VectorAssembler(
    inputCols=["trip_distance", "trip_time"],
    outputCol="features"
)

data1 = assembler.transform(df_clear1)
data2 = assembler.transform(df_clear2)
data3 = assembler.transform(df_clear3)

data1 = data1.select(["features", "fare_amount"])
data2 = data2.select(["features", "fare_amount"])
data3 = data3.select(["features", "fare_amount"])

training_data1, testing_data1 = data1.randomSplit([0.8, 0.2], seed=42)
training_data2, testing_data2 = data2.randomSplit([0.8, 0.2], seed=42)
training_data3, testing_data3 = data3.randomSplit([0.8, 0.2], seed=42)

data1.show(10)

"""#### Experimento 1"""

#Se utiliza toda la data para entrenar los modelos por problemas al realizar el split de datos
linearR1 = LinearRegression(featuresCol="features",labelCol="fare_amount")
start_time1 = time.time()
model1 = linearR1.fit(data1)
end_time1 = time.time()

print("Numero de registros: ",df_clear1.count())
print("Tiempo de entrenamiento: ",end_time1-start_time1)
print("Valor de RootMeanSquaredError: ",model1.summary.rootMeanSquaredError)
print("Valor de RootSquared: ",model1.summary.r2)

"""#### Experimento 2"""

linearR2 = LinearRegression(featuresCol="features",labelCol="fare_amount")
start_time2 = time.time()
model2 = linearR2.fit(data2)
end_time2 = time.time()

print("Numero de registros: ",df_clear2.count())
print("Tiempo de entrenamiento: ",end_time2-start_time2)
print("Valor de RootMeanSquaredError: ",model2.summary.rootMeanSquaredError)
print("Valor de RootSquared: ",model2.summary.r2)

"""#### Experimento 3"""

linearR3 = LinearRegression(featuresCol="features",labelCol="fare_amount")
start_time3 = time.time()
model3 = linearR3.fit(data3)
end_time3 = time.time()

print("Numero de registros: ",df_clear3.count())
print("Tiempo de entrenamiento: ",end_time3-start_time3)
print("Valor de RootMeanSquaredError: ",model3.summary.rootMeanSquaredError)
print("Valor de RootSquared: ",model3.summary.r2)

"""### Testeo"""

predictions1 = model1.transform(testing_data1)
evaluator1 = RegressionEvaluator(labelCol="fare_amount", predictionCol="prediction", metricName="rmse")
metric1 = evaluator1.evaluate(predictions1)

predictions1.select("features", "fare_amount", "prediction").show()